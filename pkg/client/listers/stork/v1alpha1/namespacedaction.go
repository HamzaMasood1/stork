/*
Copyright 2018 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/libopenstorage/stork/pkg/apis/stork/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespacedActionLister helps list NamespacedActions.
// All objects returned here must be treated as read-only.
type NamespacedActionLister interface {
	// List lists all NamespacedActions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespacedAction, err error)
	// NamespacedActions returns an object that can list and get NamespacedActions.
	NamespacedActions(namespace string) NamespacedActionNamespaceLister
	NamespacedActionListerExpansion
}

// namespacedActionLister implements the NamespacedActionLister interface.
type namespacedActionLister struct {
	indexer cache.Indexer
}

// NewNamespacedActionLister returns a new NamespacedActionLister.
func NewNamespacedActionLister(indexer cache.Indexer) NamespacedActionLister {
	return &namespacedActionLister{indexer: indexer}
}

// List lists all NamespacedActions in the indexer.
func (s *namespacedActionLister) List(selector labels.Selector) (ret []*v1alpha1.NamespacedAction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespacedAction))
	})
	return ret, err
}

// NamespacedActions returns an object that can list and get NamespacedActions.
func (s *namespacedActionLister) NamespacedActions(namespace string) NamespacedActionNamespaceLister {
	return namespacedActionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamespacedActionNamespaceLister helps list and get NamespacedActions.
// All objects returned here must be treated as read-only.
type NamespacedActionNamespaceLister interface {
	// List lists all NamespacedActions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespacedAction, err error)
	// Get retrieves the NamespacedAction from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NamespacedAction, error)
	NamespacedActionNamespaceListerExpansion
}

// namespacedActionNamespaceLister implements the NamespacedActionNamespaceLister
// interface.
type namespacedActionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamespacedActions in the indexer for a given namespace.
func (s namespacedActionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamespacedAction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespacedAction))
	})
	return ret, err
}

// Get retrieves the NamespacedAction from the indexer for a given namespace and name.
func (s namespacedActionNamespaceLister) Get(name string) (*v1alpha1.NamespacedAction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namespacedaction"), name)
	}
	return obj.(*v1alpha1.NamespacedAction), nil
}
